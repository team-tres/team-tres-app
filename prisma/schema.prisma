// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // for local development
    url      = env("DATABASE_URL")
    // for Vercel
    // url       = env("POSTGRES_PRISMA_URL")
    // directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
    CLIENT
    ADMIN
    ANALYST
    AUDITOR
}

model User {
    id         Int          @id @default(autoincrement())
    email      String       @unique
    username   String       @unique
    password   String
    role       Role         @default(CLIENT)
    companyId  Int?
    status     Boolean
    companyIni String?
    stressTest StressTest[]

    company Company? @relation(fields: [companyId], references: [id])

    financialCompilations FinancialCompilation[]
}

enum Condition {
    excellent
    good
    fair
    poor
}

model Stuff {
    id        Int       @id @default(autoincrement())
    name      String
    quantity  Int
    condition Condition
    income    Float
    owner     String
}

model FinancialCompilation {
    id        Int @id @default(autoincrement())
    companyId Int
    year      Int
    userId    Int

    // Income Statement
    revenue                        Int
    netSales                       Int
    costOfContracting              Int
    overhead                       Int
    costOfGoodsSold                Int
    grossProfit                    Int
    grossMarginPercentage          Float
    salariesAndBenefits            Int
    rentAndOverhead                Int
    depreciationAndAmortization    Int
    interest                       Int
    totalOperatingExpenses         Int
    operatingExpensesPercentage    Float
    profitFromOperations           Int
    profitFromOperationsPercentage Float
    interestIncome                 Int
    interestExpense                Int
    gainOnDisposalOfAssets         Int
    otherIncome                    Int
    totalOtherIncome               Int
    totalOtherIncomePercentage     Float
    incomeBeforeIncomeTaxes        Int
    pretaxIncomePercentage         Float
    incomeTaxes                    Int
    netIncome                      Int
    netIncomePercentage            Float

    // BalanceSheet
    totalAssets               Int
    cashAndCashEquivalents    Int
    accountsReceivable        Int
    inventory                 Int
    totalCurrentAssets        Int
    propertyPlantAndEquipment Int
    investment                Int
    totalLongTermAssets       Int
    accountsPayable           Int
    longDebtService           Int
    taxesPayable              Int
    totalCurrentLiabilities   Int
    currentDebtService        Int
    loansPayable              Int
    totalLongTermLiabilities  Int
    totalLiabilities          Int
    equityCapital             Int
    retainedEarnings          Int
    totalStockholdersEquity   Int
    totalLiabilitiesAndEquity Int

    company Company @relation(fields: [companyId], references: [id])
    user    User    @relation(fields: [userId], references: [id])
}

model Company {
    id    Int    @id @default(autoincrement())
    name  String @unique
    users User[]

    FinancialCompilation FinancialCompilation[]
    StressTest           StressTest[]
    setting              CompanySetting?
    multiplier           CompanyMultiplier?
}

model CompanySetting {
    id        Int     @id @default(autoincrement())
    company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId Int     @unique

    revenue                     String
    costOfContracting           String
    overhead                    String
    salariesAndBenefits         String
    rentAndOverhead             String
    depreciationAndAmortization String
    interest                    String
    profitFromOperations        String
    interestIncome              String
    interestExpense             String
    gainOnDisposalOfAssets      String
    otherIncome                 String
    incomeTaxes                 String
    cashAndCashEquivalents      String
    accountsReceivable          String
    inventory                   String
    propertyPlantAndEquipment   String
    investment                  String
    accountsPayable             String
    taxesPayable                String
    currentDebtService          String
    loansPayable                String
    longDebtService             String
    equityCapital               String
    retainedEarnings            String
}

model CompanyMultiplier {
    id        Int     @id @default(autoincrement())
    company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId Int     @unique

    revenue                     Decimal
    costOfContracting           Decimal
    overhead                    Decimal
    salariesAndBenefits         Decimal
    rentAndOverhead             Decimal
    depreciationAndAmortization Decimal
    interest                    Decimal
    profitFromOperations        Decimal
    interestIncome              Decimal
    interestExpense             Decimal
    gainOnDisposalOfAssets      Decimal
    otherIncome                 Decimal
    incomeTaxes                 Decimal
    cashAndCashEquivalents      Decimal
    accountsReceivable          Decimal
    inventory                   Decimal
    propertyPlantAndEquipment   Decimal
    investment                  Decimal
    accountsPayable             Decimal
    taxesPayable                Decimal
    currentDebtService          Decimal
    loansPayable                Decimal
    longDebtService             Decimal
    equityCapital               Decimal
    retainedEarnings            Decimal
}

model StressTest {
    id                Int                                  @id @default(autoincrement())
    company           Company                              @relation(fields: [companyId], references: [id])
    companyId         Int
    user              User                                 @relation(fields: [userId], references: [id])
    userId            Int
    type              StressTestType
    createdAt         DateTime                             @default(now())
    investmentDrop    SimulateDropInInvestmentReturnRate?
    revenueDrop       SimulateDropInRevenueReturnRate?
    oneTimeEvent      SimulateOneTimeEventExpense?
    operatingIncrease SimulateIncreaseInOperatingExpenses?
    bondReturnDrop    SimulateDecreaseInBondReturn?
}

enum StressTestType {
    DROP_INVESTMENT_RETURN
    DROP_REVENUE_RETURN
    ONE_TIME_EVENT_EXPENSE
    INCREASE_OPERATING_EXPENSE
    DECREASE_BOND_RETURN
}

model SimulateDropInInvestmentReturnRate {
    id           Int        @id @default(autoincrement())
    stressTestId Int        @unique
    stressTest   StressTest @relation(fields: [stressTestId], references: [id])

    investmentAmount       Int
    interestRate           Decimal
    interestRateDrop       Decimal
    impactedYears          Int
    reinvestmentPercentage Decimal
}

model SimulateDropInRevenueReturnRate {
    id                 Int        @id @default(autoincrement())
    stressTestId       Int        @unique
    stressTest         StressTest @relation(fields: [stressTestId], references: [id])
    netSales           Json
    investmentRate     Decimal
    investmentRateDrop Decimal
}

model SimulateOneTimeEventExpense {
    id           Int        @id @default(autoincrement())
    stressTestId Int        @unique
    stressTest   StressTest @relation(fields: [stressTestId], references: [id])
    expense      Int
    eventYear    Int
}

model SimulateIncreaseInOperatingExpenses {
    id                 Int        @id @default(autoincrement())
    stressTestId       Int        @unique
    stressTest         StressTest @relation(fields: [stressTestId], references: [id])
    expensesByYear     Json
    increasePercentage Decimal
}

model SimulateDecreaseInBondReturn {
    id                     Int        @id @default(autoincrement())
    stressTestId           Int        @unique
    stressTest             StressTest @relation(fields: [stressTestId], references: [id])
    loanAmount             Int
    loanPeriod             Int
    baselineInterestRate   Decimal
    stressTestInterestRate Decimal
}
